// 3ms is the longest time a 64byte message should take to send over the serial line

int MSG_Timeout = 3;  // miliseconds for the 64byte (max time to read the message)
bool first_Byte = 1;
int bytePOS = 0;
int MessagePOS;
byte SequenceN = 0;
byte Message[61]; byte Trailer[3];
int rpl_j=0;
byte reply[64];
  String Bytesall;
uint16_t CRCV;
int holdi;

int firstInt[117] = {0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 2, 2, 2, 3, 2, 5, 2, 1, 2, 2, 4, 5, 1, 8, 3, 2, 2, 4, 1, 8, 2, 2, 1, 1, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 6, 2, 5, 4, 2, 1, 5, 1, 2, 5, 4, 3, 1, 1, 6, 1, 1, 8, 6, 5, 6, 3, 1, 2, 2, 1, 4, 3, 1, 2, 2, 1, 2, 2, 1, 2, 1, 6, 3, 2, 1, 2, 4, 1, 2, 3, 0, 0, 1, 2, 3, 2, 1, 4, 0, 1, 2, 4, 4, 3, 1, 1, 2, 1, 2, 4, 4, 2, 3, 6, 2 };
int numString[117] = {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1 };
int secondInt[117] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

//int MessagePOS;
//byte Message[5];

int64_t IntVals[9];
String StrVals[3];

//#include <FastCRC.h>
//FastCRC16 CRC16;

#ifdef PIN_NEOPIXEL
#define BUILTIN_RGBLED_PIN PIN_NEOPIXEL
#else
#define BUILTIN_RGBLED_PIN 8  // ESP32 has no builtin RGB LED (PIN_NEOPIXEL)
#endif

#define NR_OF_LEDS     8 *4
#define NR_OF_ALL_BITS 24 * NR_OF_LEDS

#include "CRC16.h"
#include "CRC.h"


CRC16 crc_c;

#define lowByte(w) ((uint8_t) ((w) & 0xff))
#define highByte(w) ((uint8_t) ((w) >> 8))

int inByte;
bool breakbreak = 0;

volatile bool responding=0;

int VQL_len = 0;
byte Encoded[7];
// pins for the LEDs:

//Klipper protocol decoder
int64_t max_int[8] = { 95, 12287, 1572863, 201326591, 4294967295, 25769803775, 3298534883327, 422212465065983 };
int64_t min_int[7] = { -32, -4096, -524288, -67108864, -2147483648, -17179869184, -2199023255552 };

 int AnalogReadings[37][8];
 int AnalogMetaData[37][10];  // Active // PIn Num // OID  // Index // Sample Ticks // Sample Count // Rest_Ticks //Min_value  // Max_Value //  Range Check Count
 unsigned long AnalogTimmingData[37][2];
 unsigned long SampleTicks;
 unsigned long ReportTicks;
 int analogChannels; // Number of analog channels active  Poll is greater than 0;
 bool analogChannels_active; 

int ident_leng=2902;
byte ident[2902]={0x78,0xda,0x9d,0x19,0x6b,0x6f,0xdb,0xc8,0xf1,0xaf,0xec,0x9,0x8,0xda,0x2b,0x6c,0x57,0x24,0x45,0x4a,0x72,0x91,0xf,0x7e,0x25,0x97,0x26,0x4e,0x7c,
0x71,0xdc,0x1c,0x50,0x14,0x4,0x4d,0xae,0xa4,0x85,0xf9,0x3a,0x2e,0xe9,0x47,0xf,0xf9,0xef,0x9d,0xd9,0xd9,0x17,0x29,0x25,0x7,0x34,0x40,0x60,0xee,
0xee,0xcc,0xec,0xcc,0xec,0xbc,0xf5,0xc7,0x2c,0x6b,0xdb,0xd9,0xe9,0xec,0x7d,0x29,0xda,0x96,0x77,0xb3,0xa3,0xd9,0xfd,0x20,0xca,0x22,0x7d,0xe4,0x9d,
0x14,0x4d,0x2d,0xe1,0x68,0x9b,0xe7,0xa7,0xec,0xaf,0x6f,0x2f,0x2e,0x7e,0x66,0xcb,0x93,0xe8,0x64,0xce,0xee,0x45,0x3d,0xf4,0xa2,0x94,0xb8,0xfb,0xf1,
0x8e,0x9d,0xeb,0xe5,0xcf,0x2c,0x3c,0x9,0x93,0x93,0x70,0x1e,0x24,0xf3,0x20,0x8c,0x81,0x54,0xde,0x54,0x55,0x56,0x17,0x40,0xe4,0x8f,0x59,0x56,0x96,
0x4d,0x9e,0xf5,0x3c,0x6d,0x44,0x21,0x59,0xde,0xc,0x75,0xff,0xfa,0x55,0x3e,0x3b,0x5d,0xe1,0x8d,0x7d,0xf,0x57,0xa5,0x59,0xfe,0xc0,0xe0,0x14,0xb6,
0xbd,0xf3,0xc5,0xd2,0x3,0x28,0xa,0x3,0xd0,0x36,0x52,0xfd,0x11,0xf5,0xeb,0x57,0x3,0x6b,0x87,0xb2,0x4c,0x87,0x96,0x10,0xd6,0xe,0xe1,0xf7,0x81,0x77,
0x2f,0x96,0x26,0x30,0xf0,0x80,0xd0,0x1d,0x97,0x7d,0xda,0x8b,0xfc,0x41,0xd2,0xaa,0xef,0xb2,0x5a,0x56,0xa2,0x4f,0xcd,0xad,0x4c,0xd4,0x20,0xbf,0xbe,
0x1f,0x18,0xcc,0x4b,0x9e,0x75,0xa9,0xdc,0xd,0x7d,0xd1,0x3c,0xd5,0xb3,0xd3,0x10,0x45,0xab,0x37,0x62,0xb,0x1c,0xc9,0x20,0xc,0xe7,0xe6,0xa,0xd9,0x8a,
0x54,0x7f,0x16,0x59,0x9f,0xa5,0x1d,0xcf,0x8a,0x97,0x94,0x98,0x9c,0x9d,0xae,0x3,0xf,0xef,0xb9,0x8c,0x16,0xf1,0x3e,0xde,0xec,0x74,0x39,0x77,0x50,0x75,
0x56,0x36,0xdb,0x54,0xd4,0x56,0x6a,0x4d,0x29,0x72,0x1c,0x68,0x51,0xd,0x4,0x2d,0x53,0xa7,0xbf,0xd8,0x91,0x53,0x9b,0xbc,0x1b,0x13,0x1b,0xe9,0x2e,0x5e,
0x5a,0xe0,0x42,0x6c,0x45,0x9f,0x95,0x69,0x33,0xf4,0x13,0x84,0xc7,0xac,0x1c,0xb8,0x12,0x91,0x6f,0xb2,0xa1,0xec,0x53,0xbb,0x51,0x65,0xcf,0x69,0x31,0x74,
0x59,0xf,0x96,0xa3,0xf8,0xc,0x1c,0x3d,0xe,0x76,0xd0,0x37,0xed,0x88,0x56,0x3e,0xba,0x3c,0x4c,0x2c,0xf0,0xae,0x58,0x2c,0x96,0x2b,0xab,0xd6,0x4e,0x6a,0x1d,
0x32,0x6e,0x3e,0x8a,0x85,0xfd,0x8a,0xed,0x57,0x62,0xbf,0x96,0xf6,0x8b,0x97,0xd9,0x8b,0x7d,0xec,0xd9,0x69,0x12,0xb9,0x4b,0x9e,0x97,0xc1,0xb3,0xb9,0x62,0x9b,
0x9,0xd0,0xda,0x2e,0xab,0x6b,0x5e,0x2a,0xd9,0x40,0x6e,0x43,0x43,0xe6,0xe5,0x83,0x7d,0xc4,0xd5,0xca,0x12,0x10,0x61,0xce,0xcc,0xab,0x2d,0x1c,0xdd,0xb2,0xc8,
0x83,0x24,0x8,0xd,0x65,0x80,0xb2,0x6f,0xbb,0x8a,0xa7,0x50,0xe9,0x93,0xe8,0x77,0xf0,0xc2,0xfd,0xfd,0x3e,0x3c,0xc3,0x6d,0xba,0x18,0x71,0x17,0xe,0x57,0xc8,
0xb0,0x78,0x3a,0x68,0x3c,0x6b,0xb,0x54,0xb5,0xc3,0x3a,0x8c,0xe7,0x87,0xd8,0x58,0x3a,0x4d,0xd7,0xbc,0x69,0xc5,0x33,0x2f,0x27,0x6f,0xac,0xac,0x57,0x8a,0xff,
0xc2,0xb3,0xee,0x6,0x70,0xf8,0x3e,0xc5,0xb7,0xf5,0x7c,0x46,0x72,0xd8,0x2,0x95,0x39,0xcd,0xc6,0x4e,0xb6,0xf6,0xa9,0x3a,0x60,0x37,0xf9,0xb,0xf8,0x91,0xa3,
0xa1,0xad,0x66,0x37,0x4c,0xed,0x8,0x76,0xf6,0xc,0x69,0xe1,0x38,0x6,0x71,0xa7,0x84,0x31,0x74,0xf4,0xe2,0x91,0xa7,0x3b,0xb1,0xdd,0x29,0x9,0xa3,0x95,0xf,0xf,
0x8e,0xb4,0x2d,0xf9,0x1,0x27,0xb5,0x67,0x69,0xff,0xd2,0x72,0xd2,0x4d,0x34,0xc2,0x34,0x4e,0x7f,0x8,0x59,0x1f,0xa5,0x95,0xdc,0xbe,0x7e,0xf5,0x37,0x88,0x72,
0xd1,0x18,0x17,0x9f,0x16,0xcd,0x28,0x97,0xd6,0x4c,0x22,0xe7,0x10,0xb2,0x5f,0xae,0x5d,0xe4,0xc8,0xe5,0x1,0x6b,0x63,0x52,0x14,0xf6,0xf3,0xa5,0xce,0xd3,0xb1,
0x35,0xb3,0xbc,0x2a,0xd2,0x3d,0x3,0x9f,0x7b,0x37,0x70,0x8c,0xe9,0x96,0x75,0x58,0x6a,0x6b,0x62,0x85,0xe8,0xcc,0x27,0xc5,0x3a,0x5,0xec,0xa0,0x86,0x52,0x72,
0x8f,0x68,0xe8,0x4,0xeb,0x77,0xbc,0xab,0x1a,0x8,0x25,0xed,0x41,0x8d,0xfa,0xc7,0x4e,0xa9,0x89,0x13,0xbb,0xaf,0xf2,0x21,0xeb,0xac,0x6d,0x74,0xcf,0xe9,0x5e,
0x1c,0x62,0xbd,0xdd,0x44,0xcb,0xeb,0x45,0xc5,0xc9,0xc2,0x5c,0xd4,0xeb,0x3b,0xd4,0x87,0x53,0x2b,0x8,0x5d,0xf0,0xfb,0x1,0xec,0xb9,0x81,0x6c,0xb6,0x36,0x2b,
0xa0,0xb2,0x55,0xb6,0x4c,0xef,0x13,0x58,0x30,0xc,0xcc,0xac,0xe9,0xa,0xde,0xe1,0x7d,0x90,0x57,0x3a,0x8a,0x57,0xa1,0x1,0x78,0xea,0x44,0xcf,0xf7,0x20,0xd0,
0x68,0x9,0x10,0x42,0x39,0xaf,0x78,0xb7,0xe5,0x75,0xfe,0x92,0x62,0x60,0x3,0x26,0x60,0x8b,0x82,0x5c,0xba,0x6b,0x2a,0xbe,0x97,0x76,0x64,0x56,0xb5,0xbe,0x3,
0xe8,0xb5,0x4d,0x3a,0xe3,0xb4,0x4,0xac,0xbb,0xc0,0x4a,0xe2,0x5a,0x1d,0x77,0x62,0xbb,0xe5,0x1d,0xa,0x21,0x1b,0xa,0xe,0x61,0xec,0x2e,0x57,0x49,0xf,0x78,
0xca,0x7a,0x6e,0x15,0x14,0x42,0xf0,0xd8,0x8,0x48,0x27,0xe0,0xd2,0x29,0xe9,0x90,0xe5,0x5d,0x4e,0x16,0x73,0x34,0xdb,0x82,0x37,0x2b,0x3e,0x41,0xc9,0x7a,0xa5,
0x60,0xc0,0x1d,0x68,0x39,0xb4,0xf8,0xa,0xe0,0x87,0x47,0x33,0x1d,0x9b,0x53,0x9,0xf7,0xa5,0x60,0x81,0x36,0xf5,0xe0,0x37,0xe9,0x39,0x9,0x27,0x60,0xf8,0x4,0xcc,
0x4b,0x8c,0x1a,0xc,0x94,0x88,0x61,0xa9,0x6a,0xa,0xb1,0x79,0x49,0xe1,0xad,0x2d,0xad,0x8e,0x2b,0x97,0x62,0x3a,0xf3,0x2,0x7,0x78,0xaa,0xbd,0x6c,0x4d,0x68,0xf4,
0x86,0x63,0x78,0xdc,0x4b,0x4b,0xae,0x83,0xc6,0x9c,0x0,0x15,0xfa,0x20,0xfd,0x48,0x8,0x4b,0x15,0xc7,0x40,0x47,0xf8,0x17,0x9f,0x97,0x4b,0xb2,0xf5,0x45,0xe8,0xb0,
0x64,0xb3,0xe9,0x9f,0xb2,0x8e,0xfb,0xe8,0xe0,0x9f,0xd6,0x27,0x8b,0xcc,0x7c,0x1e,0xa2,0x94,0xc4,0x44,0x49,0xdb,0xd2,0x54,0xfc,0x5,0x8a,0x5f,0xf0,0xba,0x7,0xe1,
0x59,0xb3,0xd9,0xc0,0x85,0xca,0xa9,0x6d,0xea,0x86,0x73,0x93,0x25,0xe0,0x6c,0xf8,0x8e,0x59,0xf5,0x3b,0xb8,0x70,0xd7,0x94,0x85,0x5a,0xfc,0xd8,0x50,0x18,0xef,0xba,
0x66,0x64,0x38,0x2b,0xb0,0x5a,0x93,0x3,0xd4,0x5b,0x59,0x93,0x89,0xfd,0x93,0xa1,0x2d,0x9c,0x39,0x51,0xf1,0xb5,0x1b,0x3c,0x59,0x62,0x30,0xc,0xb2,0xbb,0x49,0x45,
0x34,0x32,0x6a,0xf0,0xcc,0xf9,0x4,0x4e,0xd9,0xe9,0xe0,0x2,0xe4,0x6a,0xed,0x0,0x46,0x25,0xd2,0x84,0x50,0x32,0x85,0x9b,0x12,0x4a,0x56,0x16,0x60,0x5a,0x45,0xfd,
0x9f,0x1e,0x59,0x39,0x8f,0xd4,0x29,0xca,0xad,0xa0,0x82,0xdc,0x2,0xe2,0x8e,0xe7,0xf,0x5e,0xed,0x15,0x5,0x86,0x87,0x49,0xe9,0x65,0x39,0x68,0x1b,0x8,0x7a,0xd3,
0xfb,0xbd,0x9c,0x9a,0x18,0x2,0xa3,0x62,0x65,0xa2,0x8b,0xd5,0x72,0x4,0xb5,0xa7,0x52,0x4b,0x64,0x52,0x99,0x4c,0xc9,0x4,0x13,0x38,0x65,0x6f,0x93,0x40,0xb2,0xa,
0x2d,0xd0,0xa8,0x8,0x99,0xd0,0x5a,0xae,0xc6,0x60,0x53,0x9e,0x96,0x96,0xe5,0x49,0x99,0x32,0xa5,0x13,0x4f,0xe0,0xf6,0x8,0x59,0xc3,0xdb,0xcb,0xf3,0xdf,0xa9,0xf7,
0x31,0x90,0x41,0x5a,0x17,0x1b,0x7a,0xa3,0xa5,0x15,0x88,0x28,0x4f,0x94,0x4,0x12,0x5b,0x93,0x3d,0x94,0xfa,0xbe,0x73,0x89,0x67,0x2b,0x23,0x53,0xa1,0x5,0xa4,0x5c,
0x88,0xc4,0x85,0x67,0x29,0x9,0xbd,0xd1,0xc0,0xf,0xd5,0xdd,0xf6,0x8e,0xc6,0xaf,0xb7,0x82,0xd8,0xa0,0x4c,0xca,0x2d,0xb,0x6e,0xcd,0x13,0x62,0x8d,0x5,0xc6,0xfc,
0xce,0x5c,0x7d,0xc9,0x3b,0x4a,0x69,0x26,0xec,0xec,0x54,0x8,0x83,0xbf,0x2,0x92,0x6,0xa8,0x46,0x55,0x7a,0xe0,0xb7,0xe6,0x53,0xe1,0x53,0xae,0x98,0xde,0x7,0x8,
0xa0,0x2a,0x84,0xf1,0x65,0x98,0x34,0xd,0xc0,0x77,0xb4,0x7,0xa4,0x24,0x50,0xe5,0xa1,0xa5,0x39,0xaa,0x15,0x1,0x29,0x21,0xa4,0x9a,0x3f,0x6b,0x16,0xa0,0x82,0xb1,
0x21,0x55,0x74,0x94,0xe4,0x2,0x2,0x32,0xfa,0xf8,0x93,0xba,0x13,0xb4,0x2,0xc6,0xe3,0x95,0x80,0xd8,0x6,0x6e,0x9c,0x93,0xba,0xe8,0xb6,0xc,0x8,0xce,0x8b,0x8f,0xde,
0x69,0xb4,0x30,0xa7,0xa3,0x34,0x83,0x5b,0x3a,0xcd,0x40,0x82,0xe3,0x5e,0x92,0x0,0x94,0xc4,0xa1,0x1c,0xca,0x31,0x95,0x90,0x8d,0xc9,0x2c,0x55,0x23,0xc5,0xa1,0xda,
0x70,0x8f,0x68,0xa2,0xf9,0xf8,0xbe,0x1c,0x11,0x58,0x1,0x95,0x9d,0x3f,0xca,0xde,0xf1,0x7a,0xc,0x75,0x38,0x79,0xc7,0x2b,0x84,0x52,0x5,0x66,0x8a,0x15,0x2,0xe4,0x4,
0x81,0xe5,0xba,0xf5,0x9b,0x60,0xed,0x0,0x54,0x5d,0x82,0xd6,0x4b,0x9,0x89,0xd9,0xfc,0xe4,0x65,0x2b,0xc0,0x0,0x92,0xba,0x3c,0x1c,0xa9,0x5a,0xe5,0x4f,0x9b,0xde,0x29,
0x39,0xc1,0x8b,0x68,0x6c,0xd4,0x21,0xfa,0xf4,0x1,0xf,0x0,0x93,0x58,0x39,0xb8,0xde,0x2f,0x3b,0x79,0xdb,0x74,0xba,0xe6,0x21,0xef,0x55,0x6b,0x6b,0x24,0xfc,0xb9,0x15,
0xf0,0x24,0x7e,0x85,0xb5,0xb6,0x94,0x26,0x52,0xf8,0x40,0x10,0xd6,0x28,0x55,0x1e,0xf2,0x63,0xcf,0x7,0x16,0xdf,0x4c,0x29,0x8b,0xb3,0x91,0xb3,0xcb,0x8b,0xf4,0xfa,0xec,
0x37,0x2c,0x50,0xb1,0xd2,0x3e,0xbf,0xbb,0x4d,0x6f,0xde,0x7d,0xbc,0xc5,0x90,0x36,0x3b,0x9d,0xdd,0x9c,0x47,0x47,0x37,0xe7,0x21,0xfc,0xf,0x66,0xde,0x61,0xff,0xa4,0xe,
0x2f,0xe7,0x47,0x37,0x97,0x78,0x70,0xf1,0xe1,0xd3,0xc5,0xfb,0xf4,0xcd,0xe7,0xab,0x5f,0xd1,0x5d,0xe6,0xea,0xdf,0xd1,0xec,0xfa,0xe2,0xe,0xa0,0xb2,0xbe,0xe2,0xdb,0x2c,
0x8c,0x93,0x39,0x0,0xde,0x7c,0xbd,0xa6,0xdb,0x42,0x6c,0xd9,0x3e,0x5f,0x5d,0x5c,0xbd,0xfb,0xd7,0x55,0xfa,0xf5,0xdd,0xc7,0xcb,0x4f,0x5f,0xf1,0xd9,0x42,0xdc,0xbc,0xbd,
0xfa,0xc,0x9b,0xc4,0x5,0xef,0x44,0x56,0xe2,0x5d,0x57,0x70,0xd7,0x15,0xde,0x5,0xa7,0xef,0xce,0x3e,0xa4,0xe7,0x67,0x77,0x97,0xa8,0xe3,0x15,0xde,0x74,0xfb,0xe5,0xec,
0xcb,0x6d,0x7a,0x7b,0x77,0x7d,0xfb,0x2b,0x1c,0xdc,0x5e,0x21,0xfd,0xe4,0x1b,0x96,0xa5,0x3,0x14,0xca,0xaa,0x95,0x53,0x83,0x20,0x5d,0x7e,0xe1,0xa7,0x12,0x61,0xe,0x30,
0x60,0xd2,0xb8,0xbe,0x39,0x9b,0xcf,0x4e,0xff,0x3d,0x3f,0x5a,0xfd,0x7,0xb8,0x3c,0xc7,0xef,0x15,0x7d,0x5f,0xe0,0x37,0xc4,0x0,0xb5,0xb8,0xc4,0x5,0x14,0xb4,0x6a,0x71,
0x85,0x8b,0x28,0xa4,0xc5,0x1b,0x5c,0x2c,0x34,0xfe,0x5b,0xb5,0xd0,0x4,0x7e,0xc1,0x45,0xac,0x9,0xfc,0x13,0x17,0x4b,0x8d,0xf3,0x5e,0x5d,0xa3,0x71,0x3e,0xa8,0x5,0xe2,
0x7c,0x1b,0x45,0x6,0xe8,0x63,0xd4,0xc,0x2b,0x88,0xa2,0x8,0x38,0x3e,0x9a,0x65,0x32,0x9e,0x2f,0x96,0x85,0xaa,0xd1,0xfa,0x92,0xc7,0xf3,0x20,0xbc,0x7,0x81,0x35,0x96,
0x16,0x4f,0x3d,0x1f,0x8a,0x87,0x99,0x45,0xa0,0x5,0x76,0xd0,0x8f,0xa4,0xa2,0xd0,0x6f,0xce,0x94,0x6d,0x6c,0xa8,0x78,0xa0,0xf9,0xc7,0x59,0xa9,0x46,0x46,0xcc,0xd4,
0xea,0x5,0xc5,0xcb,0x8b,0xac,0x66,0x75,0xd3,0x33,0xb0,0x75,0x86,0xf1,0x82,0x41,0x88,0xa3,0xb8,0xc6,0x94,0xc9,0xb2,0xa7,0x9d,0x80,0x6f,0x32,0x3d,0xc9,0x5a,0x70,
0x1e,0xb8,0x89,0x2,0xb2,0xc1,0x1d,0x24,0x57,0xb9,0xaf,0xb,0xd8,0xa6,0xe9,0x18,0x58,0xc1,0x3f,0xcc,0x5a,0x48,0x3c,0x2d,0xd4,0xbe,0xda,0x92,0xd4,0x6c,0x1,0xea,
0x5f,0x7a,0xcc,0x7,0xd0,0x88,0x6e,0x81,0x21,0xa8,0x35,0xb3,0x1e,0xa1,0x33,0xcd,0x26,0xb5,0xdd,0xd4,0x7e,0x68,0x60,0x89,0xa0,0x68,0xf1,0xd4,0x24,0xd1,0xae,0x4a,
0x1d,0x8a,0x34,0x70,0xca,0x6b,0x66,0x3a,0x53,0x8b,0x8f,0x97,0xd1,0xb0,0x90,0xb5,0x59,0x7,0x16,0x47,0x95,0xaa,0xea,0x3f,0xcc,0x41,0xc7,0x21,0x83,0xc9,0x5e,0x8d,
0xc,0xdf,0x64,0x20,0x6f,0xc1,0xfa,0x86,0xa9,0x40,0x81,0x93,0x18,0xe5,0xdf,0x34,0xaf,0xfb,0xe5,0x37,0x2c,0x96,0x70,0xa4,0xf3,0x77,0x3d,0xd2,0x19,0xa9,0x9a,0x5,
0xc7,0xb,0xaa,0xf3,0xdf,0x51,0x22,0x66,0x66,0x88,0xe6,0x66,0x81,0x94,0xf,0xa9,0x84,0x33,0x50,0x7a,0x9c,0xa9,0x7a,0x24,0xb7,0x7,0x60,0xc8,0x73,0x56,0x71,0x48,
0xa6,0xd4,0x2a,0x9b,0xc3,0xaa,0x79,0xe4,0x86,0x6d,0x86,0xd3,0x14,0xf4,0x7c,0x77,0x6c,0x67,0x2f,0x76,0xda,0x42,0x99,0x61,0xef,0x5c,0x57,0xdf,0xf6,0xfe,0xc8,0x63,
0x0,0x34,0xcd,0xc8,0x3e,0x3,0x4f,0x20,0x1c,0x92,0x98,0xf8,0x82,0x41,0xc9,0xdb,0xd7,0x45,0x52,0xbe,0x13,0xad,0x46,0x5c,0x4,0x63,0x0,0xd5,0x6c,0x38,0x99,0x24,0xd,
0x61,0xd,0xc4,0xa8,0xa,0xf2,0xa8,0x60,0x5b,0x76,0x9d,0x3d,0xa3,0x96,0x57,0x46,0xa1,0x34,0x12,0xb9,0x86,0x86,0x28,0x3,0xb5,0x43,0xaf,0xc,0x39,0xcb,0xbc,0x2c,0x8,
0x7a,0x2d,0x24,0x9a,0x9d,0x84,0xba,0xb9,0x18,0x4a,0xec,0xd5,0x1,0x19,0x53,0x3c,0xd3,0xd1,0x53,0x3d,0x1b,0x7f,0xe4,0xf8,0x12,0x98,0xdd,0xbf,0x8f,0xb0,0xcb,0xba,
0x42,0x79,0x85,0x86,0xc6,0x89,0xc0,0x35,0xaa,0x5f,0x55,0x3d,0xc,0xbe,0xba,0x4d,0xd9,0x3c,0x51,0xd9,0xf4,0x11,0xdc,0x21,0x63,0x24,0xe,0xfa,0xa1,0xa,0x3f,0x38,0x62,
0xf2,0xf,0xc0,0x41,0xe8,0x0,0x1b,0x21,0xff,0x40,0xd4,0x2d,0x15,0x17,0x54,0x40,0xa8,0xa3,0x1a,0x39,0x75,0xdb,0xb1,0x8a,0xb2,0xd6,0x4d,0xda,0xae,0xd9,0x82,0x32,0x2b,
0x60,0x3d,0x43,0xd9,0x36,0x90,0x9d,0x81,0x4b,0x50,0x36,0x47,0xf,0xc7,0x64,0xf6,0x99,0x6b,0xa1,0xd0,0xaa,0xd1,0x5,0xe1,0x1a,0x54,0x35,0x3c,0x3,0x9a,0x3c,0x8e,0x17,
0x6f,0x2d,0xc0,0x9e,0x76,0xd8,0x93,0x28,0x4b,0x48,0x5a,0x39,0xd0,0x1b,0xd,0xcf,0x28,0xd,0x3b,0x4c,0xab,0xa1,0x1f,0x60,0x60,0xa6,0xbb,0x5,0x77,0xa5,0x37,0x54,0xc,
0x20,0x84,0xa8,0x86,0xca,0xec,0x19,0xe7,0x0,0x8b,0xbb,0x35,0x3,0x32,0xd5,0xaa,0x3,0x31,0xe5,0xe0,0x2a,0x58,0xf9,0xf3,0xf2,0x5b,0xed,0xf1,0x7d,0xd3,0xb0,0x4d,0xa6,
0xa4,0x23,0xc9,0x70,0x32,0xf1,0xc5,0x37,0x29,0x54,0x19,0x0,0xaa,0x91,0x20,0xd,0xf2,0xbe,0x28,0x7d,0x20,0x26,0xe4,0x6b,0xc9,0xd5,0xa4,0xe5,0xae,0x96,0x43,0x8b,0x39,
0x9b,0x93,0xf7,0xab,0x90,0x8b,0xb3,0xee,0xaf,0x59,0x9f,0xef,0x8a,0x66,0x4b,0x5a,0xfc,0x89,0x5a,0x53,0xf5,0xe3,0x3,0xb4,0x67,0x43,0xfd,0x0,0x84,0x31,0x74,0xd0,0x6c,
0xda,0xdb,0x97,0xee,0x0,0xc,0x81,0x7c,0x4,0x62,0x8b,0x84,0x90,0x88,0x1e,0xc,0xd5,0x80,0x64,0xb9,0xd4,0xef,0xeb,0x66,0x6c,0x14,0xd9,0x9a,0xba,0x84,0x60,0xf8,0x8,0x4,
0xb2,0xfb,0xd2,0xc4,0x38,0x2b,0x3e,0xcd,0x2b,0x98,0x2e,0x52,0xe8,0x17,0x8a,0xc9,0xdc,0xe3,0x94,0x7d,0x82,0x28,0xb,0x99,0xf2,0x1e,0xeb,0x8a,0xd,0xce,0xbd,0xe4,0x4f,
0x54,0xbe,0xa8,0xdf,0x4b,0x6c,0xc0,0xd5,0xbf,0xa2,0x14,0x34,0xcc,0x92,0x38,0x3d,0xc0,0xf0,0x46,0x26,0x93,0xc3,0x31,0x1e,0x61,0x21,0x8,0x59,0x42,0xd,0xa8,0x3f,0x9e,
0x5d,0xbc,0xa7,0xb9,0xa3,0x99,0xbc,0xa9,0x7a,0xe,0xb5,0x59,0x66,0x1d,0xe6,0x1d,0xac,0x5f,0xf,0x14,0x2d,0xf8,0x84,0x64,0xf0,0x38,0xc7,0xd4,0xa1,0x9a,0xdc,0x9,0x4b,
0x35,0x48,0x6b,0x7b,0xb3,0x3e,0xcc,0x6b,0x50,0x59,0x44,0xc1,0x2a,0x8e,0x55,0x9a,0xd4,0x8b,0x44,0xe5,0x49,0x5a,0x24,0xb1,0xb2,0x7,0x58,0x24,0xc9,0x12,0xbe,0xa3,0x6f,
0x40,0xa9,0x14,0x39,0xa8,0x1a,0xf0,0x67,0xf8,0x83,0xd2,0xdb,0x9b,0xf,0x8f,0xd1,0x4c,0x35,0x1c,0x2d,0x4,0x11,0x4e,0xbf,0x1f,0x99,0x2e,0x7e,0xd4,0x90,0x2a,0xe7,0x4f,
0xf,0x75,0x3c,0xc7,0x18,0x88,0xcd,0xef,0x40,0x23,0x94,0xcc,0xeb,0xd1,0x99,0x3a,0xa1,0x8a,0xf6,0x18,0xb3,0x25,0x75,0x36,0xae,0x80,0x3c,0x8e,0xec,0x5b,0x43,0xe2,0xd3,
0x63,0x31,0x55,0x63,0xaa,0xe9,0x19,0xee,0x99,0x87,0x56,0x85,0x3b,0x4,0x9a,0xd4,0xb6,0x52,0x48,0x53,0xd,0xe4,0x55,0xf3,0xff,0x23,0xc6,0x35,0x8a,0xfe,0x48,0xbd,0xfb,
0xd1,0x4c,0xcd,0xcc,0x52,0x82,0x4b,0xd8,0x11,0xe4,0x31,0xc6,0x75,0x33,0xf3,0x1b,0x91,0x86,0xb6,0x1d,0x42,0xe3,0xfe,0x25,0xfe,0x48,0x11,0xf1,0x63,0x37,0x47,0x4b,0x8d,
0xae,0xbd,0x3e,0x5c,0xad,0x8d,0x6a,0xbc,0x59,0x95,0x7,0x6b,0x87,0x56,0xd4,0x17,0x9c,0x20,0x2c,0xe,0xdd,0x9c,0x52,0xd8,0xb4,0xf6,0x21,0xbd,0xac,0x17,0x6e,0xb6,0xb5,0x37,
0x65,0xf0,0x4,0x30,0x13,0x2c,0x5f,0x21,0xb,0x6f,0x2e,0xa5,0x75,0x62,0x5a,0xae,0x21,0xcf,0xd5,0xf0,0xd,0xc5,0xc3,0x6e,0x2,0xd8,0xf4,0xe7,0xbf,0xc7,0xe8,0x4f,0xe4,0xd4,
0x50,0xa3,0x41,0x2b,0xe5,0xb7,0x36,0x12,0xf3,0x74,0x9d,0xf3,0xc9,0x64,0xeb,0x18,0xd3,0xaa,0x8f,0x33,0x1a,0x40,0xb8,0x66,0x5b,0x8f,0x8,0x4c,0x3,0x41,0x8d,0xaa,0x4f,0xf2,
0x7e,0x50,0x61,0xbf,0xa0,0xb1,0xf,0x94,0x49,0x10,0x29,0x52,0x93,0x97,0xa4,0x36,0x17,0xd5,0x1c,0xbb,0x88,0x6a,0xe6,0x54,0x87,0x75,0x18,0x1f,0xea,0x5e,0xf7,0x5e,0xd2,0x9f,
0x50,0xf8,0x4f,0x1a,0xc4,0xe3,0x76,0xf1,0x4f,0x4d,0x20,0x54,0x85,0x6c,0xd7,0xab,0xca,0x72,0x1d,0x51,0x59,0x2b,0x9d,0xe9,0xca,0xa1,0xd2,0x7f,0xe4,0xef,0xda,0x77,0x42,0xd7,
0x2,0x4e,0xfa,0x43,0x9a,0x21,0xa,0xa4,0x9b,0x4c,0x22,0xc9,0xf8,0x4d,0xf,0x3a,0xf8,0x40,0xe9,0x41,0x3f,0x74,0xe2,0xda,0xc6,0x7d,0x19,0xb0,0x61,0x24,0x79,0xd7,0x7e,0x2b,0xe8,
0x8c,0x2d,0xcf,0x6c,0x5f,0x7a,0x78,0x66,0xea,0xd9,0x5e,0xa8,0x42,0xa5,0xaa,0x63,0xe9,0xa7,0xa6,0x61,0x14,0x2a,0x2,0x8,0x65,0xfa,0x87,0x73,0x8,0x65,0x8f,0xf3,0x93,0x20,0x3c,
0x99,0x83,0x9f,0x2e,0x8e,0xb7,0xc5,0xb2,0x58,0xcf,0xd7,0x61,0x36,0xfb,0xf6,0x3f,0xbf,0xb3,0x86,0x35};

   int32_t offset;
   int32_t count;
   int32_t crc;
   int32_t order;
   int32_t addr;
   int32_t val;
   int32_t pin;
   int32_t value;
   int32_t oid;
   int32_t clockint;
   int32_t on_ticks;
   int32_t cycle_ticks;
   int32_t default_value;
   int32_t max_duration;
   int32_t trsync_oid;
   int32_t dir;
   int32_t interval;
   int32_t add;
   int32_t step_pin;
   int32_t dir_pin;
   int32_t invert_step;
   int32_t step_pulse_ticks;
   int32_t sample_ticks;
   int32_t sample_count;
   int32_t rest_ticks;
   int32_t pin_value;
   int32_t trigger_reason;
   int32_t pull_up;
   int32_t reason;
   int32_t report_clock;
   int32_t report_ticks;
   int32_t expire_reason;
   int32_t min_value;
   int32_t max_value;
   int32_t range_check_count;
   int32_t spi_oid;
   int32_t spi_bus;
   int32_t mode;
   int32_t rate;
   int32_t cs_active_high;
   int32_t read_len;
   int32_t i2c_bus;
   int32_t address;
   int32_t retransmit_count;
   int32_t invert;
   int32_t pos;
   int32_t button_count;
   int32_t readint;
   int32_t rx_pin;
   int32_t tx_pin;
   int32_t bit_time;
   int32_t data_size;
   int32_t bit_max_ticks;
   int32_t reset_min_ticks;
   int32_t poll_ticks;
   int32_t cs_pin;
   int32_t sclk_pin;
   int32_t sid_pin;
   int32_t sync_delay_ticks;
   int32_t cmd_delay_ticks;
   int32_t rs_pin;
   int32_t e_pin;
   int32_t d4_pin;
   int32_t d5_pin;
   int32_t d6_pin;
   int32_t d7_pin;
   int32_t delay_ticks;
   int32_t miso_pin;
   int32_t mosi_pin;
   int32_t scl_pin;
   int32_t sda_pin;
   int32_t max_invalid_count;
   int32_t thermocouple_type;
   int32_t time_shift;
   int32_t spi_angle_type;
   int32_t i2c_oid;
   int32_t threshold;
   int32_t error_reason;
   int32_t intb_pin;
   int32_t gain_channel;
   int32_t dout_pin;
   int32_t data_ready_pin;
   int32_t static_string_id;
   int32_t sum;
   int32_t sumsq;
   int32_t high;
   int32_t is_config;
   int32_t is_shutdown;
   int32_t move_count;
   int32_t homing;
   int32_t next_clock;
   int32_t can_trigger;
   int32_t ack_count;
   int32_t success;
   int32_t count_clock;
   int32_t fault;
   int32_t trigger_clock;
   int32_t query_ticks;
   int32_t next_sequence;
   int32_t buffered;
   int32_t possible_overflows;
   int32_t sequence;

   String data;
   String shutdown_msg;
   String reg;
    String clear_set_bits;
    String writestr;
    String cmds;
    String response;
    String state;
   String readstr;
   unsigned long Time_NPT_ms = 60; // NPT read /every 100mins
unsigned long Time_NPT_LAST = 0;
long fm;
/*int bytv
 * There are three serial ports on the ESP known as U0UXD, U1UXD and U2UXD.
 * 
 * U0UXD is used to communicate with the ESP32 for programming and during reset/boot.
 * U1UXD is unused and can be used for your projects. Some boards use this port for SPI Flash access though
 * U2UXD is unused and can be used for your projects.
 * 
*/
int32_t Serial_MSG;


//HardwareSerial Serial1(1);
//HardwareSerial Serial2(1);
//#define RXD1 7
//#define TXD1 6
//#define RXD2 5
//#define TXD2 4

// below script redefines the bitRead and bitWrite functions to be compatible with int64_t valuse so that a uint32_t value cane be properly encoded
TaskHandle_t AnalogReadTask;


#undef bitRead
#undef bitWrite

template<typename T> void bitWrite(T& value, byte bit, byte val);  // prototype
template<typename T> void bitWrite(T& value, byte bit, byte val) {
  if (val)
    value |= (T(1) << bit);
  else
    value &= ~(T(1) << bit);
}

template<typename T> bool bitRead(T value, byte bit);  // prototype
template<typename T> bool bitRead(T value, byte bit) {
  return (value & ((T)1 << bit)) != 0;
}

rmt_data_t led_data[NR_OF_ALL_BITS];
void setup() {
  // Note the format for setting a serial port is as follows: Serial2.begin(baud-rate, protocol, RX pin, TX pin);
  Serial.begin(250000); 
  Serial.setTimeout(25);
first_Byte=1;
  //  Serial1.begin(250000, SERIAL_8N1, RXD1, TXD1);
  //  Serial2.begin(250000, SERIAL_8N1, RXD2, TXD2);
  Serial.println("Begun");
 
  Serial.println("loop");


  xTaskCreatePinnedToCore(
      AnalogReadTaskcode, /* Function to implement the task */
      "AnalogReadTask", /* Name of the task */
      10000,  /* Stack size in words */
      NULL,  /* Task input parameter */
      1,  /* Priority of the task */
      &AnalogReadTask,  /* Task handle. */
      0); /* Core where the task should run */


}



void loop() {  //Choose Serial1 or Serial2 as required
//Serial.println("loop");
  Serial_Parse();
 if ((millis() - Time_NPT_LAST >= Time_NPT_ms) ){

 
  }
}